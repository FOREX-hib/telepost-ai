import os
import sqlite3
import google.generativeai as genai
from telethon import TelegramClient
import logging

# --- –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è ---
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s | %(levelname)s | %(message)s'
)
log = logging.getLogger("Bot")

# --- –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è ---
class Config:
    GEMINI_API_KEY   = os.environ['GEMINI_API_KEY']
    API_ID           = int(os.environ['API_ID'])
    API_HASH         = os.environ['API_HASH']
    BOT_TOKEN        = os.environ['BOT_TOKEN']
    CHANNEL_USERNAME = os.environ['CHANNEL_USERNAME']

# --- –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Gemini ---
try:
    genai.configure(api_key=Config.GEMINI_API_KEY)
    model = genai.GenerativeModel('gemini-1.5-flash')
except Exception as e:
    log.critical(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å Gemini API: {e}")
    raise

async def generate_post(topic: str, style: str) -> str:
    """
    –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –ø–æ—Å—Ç —á–µ—Ä–µ–∑ Google Gemini
    """
    prompt = f"""
    –ù–∞–ø–∏—à–∏ –ø–æ—Å—Ç –¥–ª—è Telegram-–∫–∞–Ω–∞–ª–∞:
    - –¢–µ–º–∞: {topic}
    - –°—Ç–∏–ª—å: {style}
    - –î–ª–∏–Ω–∞: 3‚Äì5 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π
    - –Ø–∑—ã–∫: —Ä—É—Å—Å–∫–∏–π
    - –î–æ–±–∞–≤—å 1‚Äì2 —Å–º–∞–π–ª–∏–∫–∞
    - –ù–µ –∏—Å–ø–æ–ª—å–∑—É–π —Ö—ç—à—Ç–µ–≥–∏
    - –ë—É–¥—å –¥—Ä—É–∂–µ–ª—é–±–Ω—ã–º, –∫–∞–∫ —ç–∫—Å–ø–µ—Ä—Ç
    """
    try:
        response = model.generate_content(prompt, timeout=30)
        text = response.text.strip()[:600]
        log.info(f"‚úÖ –ü–æ—Å—Ç —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω: {text}")
        return text
    except AttributeError:
        log.error("‚ùå Gemini –Ω–µ –≤–µ—Ä–Ω—É–ª —Ç–µ–∫—Å—Ç. –í–æ–∑–º–æ–∂–Ω–æ, –æ—Ç–≤–µ—Ç –±—ã–ª –æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω.")
        return "–°–µ–≥–æ–¥–Ω—è –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã–π –ø–æ—Å—Ç ‚Äî –ø–æ–¥—É–º–∞–π –Ω–∞–¥ —ç—Ç–∏–º! üí°"
    except Exception as e:
        log.error(f"‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø–æ—Å—Ç–∞: {e}")
        return "–°–µ–≥–æ–¥–Ω—è –±–µ–∑ –ø–æ—Å—Ç–∞... ü§ñ"

async def send_daily_post():
    """
    –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è: –≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ø–æ—Å—Ç –≤ Telegram
    """
    try:
        # –ü–æ–ª—É—á–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–∑ –±–∞–∑—ã
        with sqlite3.connect('config.db') as conn:
            conn.row_factory = sqlite3.Row
            c = conn.cursor()
            c.execute("SELECT topics, style, enabled FROM settings WHERE id=1")
            row = c.fetchone()

        if not row:
            log.warning("‚ùå –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö")
            return

        if not row['enabled']:
            log.info("‚è∏Ô∏è –ê–≤—Ç–æ–ø–æ—Å—Ç–∏–Ω–≥ –æ—Ç–∫–ª—é—á—ë–Ω. –ü–æ—Å—Ç –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω.")
            return

        topics = [t.strip() for t in row['topics'].split(',') if t.strip()]
        style = row['style']

        if not topics:
            log.warning("‚ùå –ù–µ—Ç —Ç–µ–º –¥–ª—è –ø–æ—Å—Ç–∞")
            return

        import random
        topic = random.choice(topics)
        log.info(f"üéØ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø–æ—Å—Ç–∞ –ø–æ —Ç–µ–º–µ: {topic}")

        post = await generate_post(topic, style)

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ—Å—Ç –≤ –±–∞–∑—É
        with sqlite3.connect('config.db') as conn:
            conn.execute("UPDATE settings SET last_post = ? WHERE id=1", (post,))
            conn.commit()

        # –û—Ç–ø—Ä–∞–≤–∫–∞ –≤ Telegram
        client = TelegramClient('bot_session', Config.API_ID, Config.API_HASH)
        try:
            await client.start(bot_token=Config.BOT_TOKEN)
            await client.send_message(Config.CHANNEL_USERNAME, post)
            log.info(f"üì¨ –ü–æ—Å—Ç —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –≤ {Config.CHANNEL_USERNAME}")
        except Exception as e:
            log.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ Telegram: {e}")
        finally:
            await client.disconnect()

    except sqlite3.Error as e:
        log.error(f"‚ùå –û—à–∏–±–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö: {e}")
    except Exception as e:
        log.error(f"‚ùå –ù–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {e}")
