import os
import sqlite3
import google.generativeai as genai
from telethon import TelegramClient
import logging

logging.basicConfig(level=logging.INFO)
log = logging.getLogger("Bot")

class Config:
    GEMINI_API_KEY   = os.environ['GEMINI_API_KEY']
    API_ID           = int(os.environ['API_ID'])
    API_HASH         = os.environ['API_HASH']
    BOT_TOKEN        = os.environ['BOT_TOKEN']
    CHANNEL_USERNAME = os.environ['CHANNEL_USERNAME']

genai.configure(api_key=Config.GEMINI_API_KEY)
model = genai.GenerativeModel('gemini-1.5-flash')

async def generate_post(topic: str, style: str) -> str:
    prompt = f"""
    –ù–∞–ø–∏—à–∏ –ø–æ—Å—Ç –¥–ª—è Telegram-–∫–∞–Ω–∞–ª–∞:
    - –¢–µ–º–∞: {topic}
    - –°—Ç–∏–ª—å: {style}
    - –î–ª–∏–Ω–∞: 3‚Äì5 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π
    - –Ø–∑—ã–∫: —Ä—É—Å—Å–∫–∏–π
    - –î–æ–±–∞–≤—å 1‚Äì2 —Å–º–∞–π–ª–∏–∫–∞
    - –ù–µ –∏—Å–ø–æ–ª—å–∑—É–π —Ö—ç—à—Ç–µ–≥–∏
    - –ë—É–¥—å –¥—Ä—É–∂–µ–ª—é–±–Ω—ã–º, –∫–∞–∫ —ç–∫—Å–ø–µ—Ä—Ç
    """
    try:
        response = model.generate_content(prompt)
        text = response.text.strip()[:600]
        log.info(f"‚úÖ –ü–æ—Å—Ç —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω: {text}")
        return text
    except Exception as e:
        log.error(f"‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏: {e}")
        return "–°–µ–≥–æ–¥–Ω—è –±–µ–∑ –ø–æ—Å—Ç–∞... ü§ñ"

async def send_daily_post():
    try:
        with sqlite3.connect('config.db') as conn:
            c = conn.cursor()
            c.execute("SELECT topics, style, enabled FROM settings WHERE id=1")
            row = c.fetchone()
            if not row or not row[2]:
                return
            topics = [t.strip() for t in row[0].split(',') if t.strip()]
            style = row[1]

        if not topics:
            log.warning("–ù–µ—Ç —Ç–µ–º –¥–ª—è –ø–æ—Å—Ç–∞")
            return

        import random
        topic = random.choice(topics)
        post = await generate_post(topic, style)

        with sqlite3.connect('config.db') as conn:
            conn.execute("UPDATE settings SET last_post = ? WHERE id=1", (post,))
            conn.commit()

        client = TelegramClient('bot_session', Config.API_ID, Config.API_HASH)
        await client.start(bot_token=Config.BOT_TOKEN)
        await client.send_message(Config.CHANNEL_USERNAME, post)
        await client.disconnect()

        log.info(f"üì¨ –ü–æ—Å—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω: {post}")

    except Exception as e:
        log.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏: {e}")
